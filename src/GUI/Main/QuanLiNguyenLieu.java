package GUI.Main;

import BUS.IngredientsBUS;
import DTO.IngredientsDTO;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.DefaultTableCellRenderer;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
/**
 *
 * @author Tai
 */
public class QuanLiNguyenLieu extends javax.swing.JPanel {

    /**
     * Creates new form QuanLiNguyenLieu
     */
    public QuanLiNguyenLieu() throws Exception {
        initComponents();
        loadDataToTable(jTable1);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {

        });

        
    }

    private void loadDataToTable(JTable table) throws Exception {
        // Tạo một đối tượng IngredientsBUS
        IngredientsBUS ingredientsBUS = new IngredientsBUS();

        // Gọi phương thức để lấy danh sách nguyên liệu từ cơ sở dữ liệu
        ArrayList<IngredientsDTO> ingredientsList = ingredientsBUS.getAllActiveIngredients();

        // Tạo DefaultTableModel để đặt dữ liệu vào jTable
        DefaultTableModel model = (DefaultTableModel) table.getModel();

        // Xóa toàn bộ dữ liệu cũ trong jTable
        model.setRowCount(0);

        // Duyệt qua danh sách nguyên liệu và thêm từng dòng vào jTable
        for (IngredientsDTO ingredient : ingredientsList) {
            Object[] row = {ingredient.getId(), ingredient.getName(), ingredient.getDes(), ingredient.getQuantity(), ingredient.getUnit()};
            model.addRow(row);
        }
        // Set alignment for cells in each column to left
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(JLabel.CENTER);
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            jTable1.getColumnModel().getColumn(i).setCellRenderer(renderer);
}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        panelBackground1 = new GUI.Comp.Swing.PanelBackground();
        panelBackground2 = new GUI.Comp.Swing.PanelBackground();
        panelBackground3 = new GUI.Comp.Swing.PanelBackground();
        panelBackground4 = new GUI.Comp.Swing.PanelBackground();
        panelBackground5 = new GUI.Comp.Swing.PanelBackground();
        panelBackground6 = new GUI.Comp.Swing.PanelBackground();
        panelBackground7 = new GUI.Comp.Swing.PanelBackground();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        panelBackground8 = new GUI.Comp.Swing.PanelBackground();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jPanel3.setMaximumSize(new java.awt.Dimension(50, 23));
        jPanel3.setPreferredSize(new java.awt.Dimension(50, 23));

        setBackground(new java.awt.Color(30, 30, 30));
        setLayout(new java.awt.BorderLayout());

        panelBackground1.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground1.setLayout(new java.awt.BorderLayout());

        panelBackground2.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground1.add(panelBackground2, java.awt.BorderLayout.LINE_START);

        panelBackground3.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground3.setPreferredSize(new java.awt.Dimension(10, 20));
        panelBackground1.add(panelBackground3, java.awt.BorderLayout.PAGE_START);

        panelBackground4.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground4.setToolTipText("");
        panelBackground1.add(panelBackground4, java.awt.BorderLayout.LINE_END);

        panelBackground5.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground1.add(panelBackground5, java.awt.BorderLayout.PAGE_END);

        panelBackground6.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground6.setLayout(new java.awt.BorderLayout(0, 25));

        panelBackground7.setBackground(new java.awt.Color(35, 35, 35));
        panelBackground7.setMinimumSize(new java.awt.Dimension(1000, 23));
        panelBackground7.setPreferredSize(new java.awt.Dimension(1000, 60));
        panelBackground7.setLayout(new javax.swing.BoxLayout(panelBackground7, javax.swing.BoxLayout.LINE_AXIS));

        jPanel2.setBackground(new java.awt.Color(35, 35, 35));
        jPanel2.setMaximumSize(new java.awt.Dimension(50, 23));
        jPanel2.setPreferredSize(new java.awt.Dimension(50, 23));
        panelBackground7.add(jPanel2);

        jButton1.setBackground(new java.awt.Color(102, 102, 102));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Thêm");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(53, 53, 53)));
        jButton1.setMaximumSize(new java.awt.Dimension(72, 40));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        panelBackground7.add(jButton1);

        jPanel4.setBackground(new java.awt.Color(35, 35, 35));
        jPanel4.setMaximumSize(new java.awt.Dimension(50, 23));
        jPanel4.setPreferredSize(new java.awt.Dimension(50, 23));
        panelBackground7.add(jPanel4);

        jButton3.setBackground(new java.awt.Color(102, 102, 102));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Sửa");
        jButton3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(53, 53, 53)));
        jButton3.setMaximumSize(new java.awt.Dimension(72, 40));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        panelBackground7.add(jButton3);

        jPanel5.setBackground(new java.awt.Color(35, 35, 35));
        jPanel5.setMaximumSize(new java.awt.Dimension(50, 23));
        jPanel5.setPreferredSize(new java.awt.Dimension(50, 23));
        panelBackground7.add(jPanel5);

        jButton4.setBackground(new java.awt.Color(102, 102, 102));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Xóa");
        jButton4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(53, 53, 53)));
        jButton4.setMaximumSize(new java.awt.Dimension(72, 40));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        panelBackground7.add(jButton4);

        panelBackground6.add(panelBackground7, java.awt.BorderLayout.PAGE_START);

        panelBackground8.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground8.setLayout(new java.awt.BorderLayout());

        jTable1.setBackground(new java.awt.Color(35, 35, 35));
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Tên", "Mô Tả", "Số lượng", "đơn vị"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        panelBackground8.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        panelBackground6.add(panelBackground8, java.awt.BorderLayout.CENTER);

        panelBackground1.add(panelBackground6, java.awt.BorderLayout.CENTER);

        add(panelBackground1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Hiển thị các hộp thoại để yêu cầu nhập thông tin
        String idInput = JOptionPane.showInputDialog(this, "Nhập ID:");
        if (idInput == null || idInput.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "ID không được để trống.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return; // ID không được để trống
        }
        int id;
        try {
            id = Integer.parseInt(idInput);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID phải là một số nguyên.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return; // ID không hợp lệ
        }

        String name = JOptionPane.showInputDialog(this, "Nhập tên nguyên liệu:");
        if (name == null || name.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tên nguyên liệu không được để trống.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return; // Tên nguyên liệu không được để trống
        }

        String des = JOptionPane.showInputDialog(this, "Nhập mô tả:");
        if (des == null) {
            // Người dùng bấm Cancel
            return;
        }

        String quantityInput = JOptionPane.showInputDialog(this, "Nhập số lượng:");
        if (quantityInput == null) {
            // Người dùng bấm Cancel
            return;
        }
        int quantity;
        try {
            quantity = Integer.parseInt(quantityInput);
            if (quantity < 0) {
                JOptionPane.showMessageDialog(this, "Số lượng không được là số âm.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Số lượng phải là một số nguyên.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        String unit = JOptionPane.showInputDialog(this, "Nhập đơn vị:");
        if (unit == null) {
            // Người dùng bấm Cancel
            return;
        }

        // Kiểm tra xem id đã tồn tại trong cơ sở dữ liệu chưa
        IngredientsBUS ingredientsBUS = new IngredientsBUS();
        IngredientsDTO existingIngredient = null;
        try {
            existingIngredient = ingredientsBUS.getIngredientById(id);
        } catch (Exception ex) {
            Logger.getLogger(QuanLiNguyenLieu.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (existingIngredient != null) {
            JOptionPane.showMessageDialog(this, "ID đã tồn tại trong cơ sở dữ liệu!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Tạo một đối tượng IngredientsDTO để thêm vào cơ sở dữ liệu
        IngredientsDTO newIngredient = new IngredientsDTO();
        newIngredient.setId(id);
        newIngredient.setName(name);
        newIngredient.setDes(des);
        newIngredient.setQuantity(quantity);
        newIngredient.setUnit(unit);
        newIngredient.setIsDeleted(false);

        // Thêm nguyên liệu vào cơ sở dữ liệu
        boolean success = false;
        try {
            success = ingredientsBUS.addIngredient(newIngredient);
        } catch (Exception ex) {
            Logger.getLogger(QuanLiNguyenLieu.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (!success) {
            JOptionPane.showMessageDialog(this, "Thêm nguyên liệu không thành công!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Hiển thị thông báo thành công
        JOptionPane.showMessageDialog(this, "Thêm nguyên liệu thành công!");

        try {
            // Cập nhật dữ liệu trên jTable
            loadDataToTable(jTable1);
        } catch (Exception ex) {
            Logger.getLogger(QuanLiNguyenLieu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Kiểm tra xem người dùng đã chọn một dòng để sửa hay không
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để sửa.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return; // Không có dòng nào được chọn, thoát khỏi phương thức
        }

        // Lấy thông tin hiện tại của dòng đã chọn
        int id = (int) jTable1.getValueAt(selectedRow, 0);
        String currentName = (String) jTable1.getValueAt(selectedRow, 1);
        String currentDes = (String) jTable1.getValueAt(selectedRow, 2);
        int currentQuantity = (int) jTable1.getValueAt(selectedRow, 3);
        String currentUnit = (String) jTable1.getValueAt(selectedRow, 4);

        // Hiển thị hộp thoại cho phép người dùng nhập thông tin mới
        String newName = JOptionPane.showInputDialog(this, "Nhập tên mới cho nguyên liệu:", currentName);
        if (newName == null || newName.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tên nguyên liệu không được để trống.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return; // Tên nguyên liệu không được để trống
        }

        String newDes = JOptionPane.showInputDialog(this, "Nhập mô tả mới cho nguyên liệu:", currentDes);
        if (newDes == null) {
            // Người dùng bấm Cancel
            return;
        }

        String newQuantityStr = JOptionPane.showInputDialog(this, "Nhập số lượng mới cho nguyên liệu:", currentQuantity);
        if (newQuantityStr == null) {
            // Người dùng bấm Cancel
            return;
        }
        int newQuantity;
        try {
            newQuantity = Integer.parseInt(newQuantityStr);
            if (newQuantity < 0) {
                JOptionPane.showMessageDialog(this, "Số lượng không được là số âm.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Số lượng phải là một số nguyên.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        String newUnit = JOptionPane.showInputDialog(this, "Nhập đơn vị mới cho nguyên liệu:", currentUnit);
        if (newUnit == null) {
            // Người dùng bấm Cancel
            return;
        }

        // Tạo một đối tượng IngredientsDTO mới để cập nhật
        IngredientsDTO ingredient = new IngredientsDTO();
        ingredient.setId(id);
        ingredient.setName(newName);
        ingredient.setDes(newDes);
        ingredient.setQuantity(newQuantity);
        ingredient.setUnit(newUnit);

        // Gọi phương thức updateIngredient() từ IngredientsBUS để cập nhật thông tin mới
        IngredientsBUS ingredientsBUS = new IngredientsBUS();
        boolean success = false;
        try {
            success = ingredientsBUS.updateIngredient(ingredient);
        } catch (Exception ex) {
            Logger.getLogger(QuanLiNguyenLieu.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (!success) {
            JOptionPane.showMessageDialog(this, "Cập nhật nguyên liệu không thành công!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Hiển thị thông báo thành công
        JOptionPane.showMessageDialog(this, "Cập nhật nguyên liệu thành công!");

        try {
            // Cập nhật lại dữ liệu trên jTable
            loadDataToTable(jTable1);
        } catch (Exception ex) {
            Logger.getLogger(QuanLiNguyenLieu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Kiểm tra xem người dùng đã chọn một dòng để xóa hay không
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng để xóa.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            return; // Không có dòng nào được chọn, thoát khỏi phương thức
        }

        // Hiển thị hộp thoại xác nhận xóa
        int option = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn xóa dòng này?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
        if (option != JOptionPane.YES_OPTION) {
            return; // Người dùng không đồng ý xóa, thoát khỏi phương thức
        }

        // Lấy ID của dòng được chọn để xóa
        int id = (int) jTable1.getValueAt(selectedRow, 0);

        // Gọi phương thức deleteIngredient() từ IngredientsBUS để set cột isDeleted thành True
        IngredientsBUS ingredientsBUS = new IngredientsBUS();
        boolean success = false;
        try {
            success = ingredientsBUS.setIngredientAsDeleted(id);
        } catch (Exception ex) {
            Logger.getLogger(QuanLiNguyenLieu.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (!success) {
            JOptionPane.showMessageDialog(this, "Xóa nguyên liệu không thành công!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Hiển thị thông báo thành công
        JOptionPane.showMessageDialog(this, "Xóa nguyên liệu thành công!");

        try {
            // Cập nhật lại dữ liệu trên jTable
            loadDataToTable(jTable1);
        } catch (Exception ex) {
            Logger.getLogger(QuanLiNguyenLieu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jButton1;
    public javax.swing.JButton jButton3;
    public javax.swing.JButton jButton4;
    public javax.swing.JPanel jPanel2;
    public javax.swing.JPanel jPanel3;
    public javax.swing.JPanel jPanel4;
    public javax.swing.JPanel jPanel5;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    public GUI.Comp.Swing.PanelBackground panelBackground1;
    public GUI.Comp.Swing.PanelBackground panelBackground2;
    public GUI.Comp.Swing.PanelBackground panelBackground3;
    public GUI.Comp.Swing.PanelBackground panelBackground4;
    public GUI.Comp.Swing.PanelBackground panelBackground5;
    public GUI.Comp.Swing.PanelBackground panelBackground6;
    public GUI.Comp.Swing.PanelBackground panelBackground7;
    public GUI.Comp.Swing.PanelBackground panelBackground8;
    // End of variables declaration//GEN-END:variables
}
