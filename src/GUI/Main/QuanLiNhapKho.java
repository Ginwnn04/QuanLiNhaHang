/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.Main;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.FileOutputStream;
import GUI.Comp.BillDetailDialog;
import BUS.ConnectDB;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Date;
import java.time.LocalDate;
import java.io.FileOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author Tai
 */
public class QuanLiNhapKho extends javax.swing.JPanel {

    /**
     * Creates new form QuanLiNhapKho
     */
    public QuanLiNhapKho() {
        initComponents();
        loadImportBills();
    }

    private void loadImportBills() {
        try {
            // Kết nối cơ sở dữ liệu và thực hiện truy vấn
            Connection con = ConnectDB.openConnect();
            PreparedStatement ps = con.prepareStatement("SELECT id, quantity, total, import_date, userid, supplierID FROM tb_import_bill");
            ResultSet rs = ps.executeQuery();

            // Lấy model của jTable
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

            // Xóa dữ liệu cũ trong bảng
            model.setRowCount(0);

            // Duyệt qua các dòng dữ liệu từ ResultSet và thêm vào bảng
            while (rs.next()) {
                Object[] row = {
                    rs.getLong("id"),
                    rs.getInt("quantity"),
                    rs.getDouble("total"),
                    rs.getString("import_date"),
                    rs.getLong("userid"), // Sử dụng getLong() cho cột có kiểu int8
                    rs.getLong("supplierID") // Sử dụng getLong() cho cột có kiểu int8
                };
                model.addRow(row);
            }

            // Đóng kết nối
            rs.close();
            ps.close();
            con.close();
            // Thông báo cho jTable biết rằng dữ liệu đã thay đổi và cần phải vẽ lại
            model.fireTableDataChanged();
        } catch (Exception e) {
            e.printStackTrace();
        }
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            jTable1.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelBackground1 = new GUI.Comp.Swing.PanelBackground();
        panelBackground2 = new GUI.Comp.Swing.PanelBackground();
        panelBackground3 = new GUI.Comp.Swing.PanelBackground();
        panelBackground4 = new GUI.Comp.Swing.PanelBackground();
        panelBackground5 = new GUI.Comp.Swing.PanelBackground();
        panelBackground6 = new GUI.Comp.Swing.PanelBackground();
        panelBackground7 = new GUI.Comp.Swing.PanelBackground();
        jPanel8 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        panelBackground8 = new GUI.Comp.Swing.PanelBackground();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(30, 30, 30));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        panelBackground1.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground1.setLayout(new java.awt.BorderLayout());

        panelBackground2.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground1.add(panelBackground2, java.awt.BorderLayout.LINE_START);

        panelBackground3.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground1.add(panelBackground3, java.awt.BorderLayout.PAGE_START);

        panelBackground4.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground1.add(panelBackground4, java.awt.BorderLayout.LINE_END);

        panelBackground5.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground1.add(panelBackground5, java.awt.BorderLayout.PAGE_END);

        panelBackground6.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground6.setLayout(new java.awt.BorderLayout(0, 20));

        panelBackground7.setBackground(new java.awt.Color(35, 35, 35));
        panelBackground7.setPreferredSize(new java.awt.Dimension(100, 75));
        panelBackground7.setLayout(new javax.swing.BoxLayout(panelBackground7, javax.swing.BoxLayout.LINE_AXIS));

        jPanel8.setBackground(new java.awt.Color(35, 35, 35));
        jPanel8.setMaximumSize(new java.awt.Dimension(20, 23));
        panelBackground7.add(jPanel8);

        jButton1.setBackground(new java.awt.Color(102, 102, 102));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Thêm");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(53, 53, 53)));
        jButton1.setMaximumSize(new java.awt.Dimension(72, 40));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        panelBackground7.add(jButton1);

        jPanel2.setBackground(new java.awt.Color(35, 35, 35));
        jPanel2.setMaximumSize(new java.awt.Dimension(20, 23));
        panelBackground7.add(jPanel2);

        jButton5.setBackground(new java.awt.Color(102, 102, 102));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Nhập hàng");
        jButton5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(53, 53, 53)));
        jButton5.setMaximumSize(new java.awt.Dimension(124, 40));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        panelBackground7.add(jButton5);

        jPanel3.setBackground(new java.awt.Color(35, 35, 35));
        jPanel3.setMaximumSize(new java.awt.Dimension(20, 23));
        panelBackground7.add(jPanel3);

        jButton2.setBackground(new java.awt.Color(102, 102, 102));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Sửa");
        jButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(53, 53, 53)));
        jButton2.setMaximumSize(new java.awt.Dimension(72, 40));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        panelBackground7.add(jButton2);

        jPanel4.setBackground(new java.awt.Color(35, 35, 35));
        jPanel4.setMaximumSize(new java.awt.Dimension(20, 23));
        panelBackground7.add(jPanel4);

        jButton3.setBackground(new java.awt.Color(102, 102, 102));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Xóa");
        jButton3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(53, 53, 53)));
        jButton3.setMaximumSize(new java.awt.Dimension(72, 40));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        panelBackground7.add(jButton3);

        jPanel6.setBackground(new java.awt.Color(35, 35, 35));
        jPanel6.setMaximumSize(new java.awt.Dimension(20, 23));
        panelBackground7.add(jPanel6);

        jButton4.setBackground(new java.awt.Color(102, 102, 102));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Chi tiết");
        jButton4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(53, 53, 53)));
        jButton4.setMaximumSize(new java.awt.Dimension(72, 40));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        panelBackground7.add(jButton4);

        jPanel7.setBackground(new java.awt.Color(35, 35, 35));
        jPanel7.setMaximumSize(new java.awt.Dimension(20, 23));
        panelBackground7.add(jPanel7);

        jButton6.setBackground(new java.awt.Color(102, 102, 102));
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Xuất file Excel");
        jButton6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(53, 53, 53)));
        jButton6.setMaximumSize(new java.awt.Dimension(103, 40));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        panelBackground7.add(jButton6);

        jPanel9.setBackground(new java.awt.Color(35, 35, 35));
        jPanel9.setMaximumSize(new java.awt.Dimension(20, 23));
        panelBackground7.add(jPanel9);

        jButton7.setBackground(new java.awt.Color(102, 102, 102));
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("Nhập file Excel");
        jButton7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(53, 53, 53)));
        jButton7.setMaximumSize(new java.awt.Dimension(103, 40));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        panelBackground7.add(jButton7);

        panelBackground6.add(panelBackground7, java.awt.BorderLayout.PAGE_START);

        panelBackground8.setBackground(new java.awt.Color(35, 35, 35));
        panelBackground8.setLayout(new java.awt.BorderLayout());

        jTable1.setBackground(new java.awt.Color(35, 35, 35));
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Số loại nguyên liệu", "Tổng tiền", "Ngày nhập hàng", "ID người nhập", "ID NCC"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        panelBackground8.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        panelBackground6.add(panelBackground8, java.awt.BorderLayout.CENTER);

        panelBackground1.add(panelBackground6, java.awt.BorderLayout.CENTER);

        jPanel1.add(panelBackground1);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hóa đơn để xóa.");
            return;
        }

        int confirmation = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa hóa đơn này và tất cả các chi tiết của nó?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
        if (confirmation == JOptionPane.YES_OPTION) {
            // Lấy id của hóa đơn được chọn
            long selectedBillId = (long) jTable1.getValueAt(selectedRow, 0);

            // Kiểm tra và xóa các dòng dữ liệu trong bảng tb_detail_import_bill
            try (Connection con = ConnectDB.openConnect(); PreparedStatement deleteDetailPs = con.prepareStatement("DELETE FROM tb_detail_import_bill WHERE billid = ?")) {
                deleteDetailPs.setLong(1, selectedBillId);
                deleteDetailPs.executeUpdate();
            } catch (Exception ex) {
                Logger.getLogger(QuanLiNhapKho.class.getName()).log(Level.SEVERE, null, ex);
            }

            // Xóa dòng dữ liệu trong bảng tb_import_bill
            try (Connection con = ConnectDB.openConnect(); PreparedStatement deleteImportBillPs = con.prepareStatement("DELETE FROM tb_import_bill WHERE id = ?")) {
                deleteImportBillPs.setLong(1, selectedBillId);
                deleteImportBillPs.executeUpdate();
            } catch (Exception ex) {
                Logger.getLogger(QuanLiNhapKho.class.getName()).log(Level.SEVERE, null, ex);
            }

            JOptionPane.showMessageDialog(this, "Đã xóa hóa đơn và các chi tiết thành công.");
            loadImportBills(); // Tải lại danh sách hóa đơn sau khi xóa
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // Hiển thị các hộp thoại yêu cầu nhập dữ liệu
            long id = Long.parseLong(JOptionPane.showInputDialog(this, "Nhập ID của hóa đơn:"));
            int quantity = Integer.parseInt(JOptionPane.showInputDialog(this, "Nhập số loại nguyên liệu:"));
            double total = Double.parseDouble(JOptionPane.showInputDialog(this, "Nhập tổng tiền:"));
            long userid = Long.parseLong(JOptionPane.showInputDialog(this, "Nhập ID của người nhập:"));
            long supplierid = Long.parseLong(JOptionPane.showInputDialog(this, "Nhập ID của nhà cung cấp:"));

            // Lấy ngày hiện tại
            LocalDate importDate = LocalDate.now();

            // Chuyển đổi LocalDate thành java.sql.Timestamp để có thể chèn vào cột kiểu TIMESTAMP trong cơ sở dữ liệu
            Timestamp sqlImportDate = Timestamp.valueOf(importDate.atStartOfDay());

            try ( // Thực hiện thêm hóa đơn vào cơ sở dữ liệu
                    Connection con = ConnectDB.openConnect(); PreparedStatement ps = con.prepareStatement("INSERT INTO tb_import_bill (id, quantity, total, import_date, userid, supplierID) VALUES (?, ?, ?, ?, ?, ?)")) {
                ps.setLong(1, id);
                ps.setInt(2, quantity);
                ps.setDouble(3, total);
                ps.setTimestamp(4, sqlImportDate); // Sử dụng setTimestamp để thêm java.sql.Timestamp vào cột kiểu TIMESTAMP trong cơ sở dữ liệu
                ps.setLong(5, userid);
                ps.setLong(6, supplierid);
                ps.executeUpdate();
                // Đóng kết nối và thông báo thành công

            }
            JOptionPane.showMessageDialog(this, "Đã thêm hóa đơn thành công");
            loadImportBills();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập số cho các trường số liệu");
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi thêm hóa đơn");
        } catch (Exception ex) {
            Logger.getLogger(QuanLiNhapKho.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // Lấy chỉ số của dòng được chọn trong jTable
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hóa đơn để thêm chi tiết nhập hàng.");
            return;
        }
        // Lấy số loại nguyên liệu từ cột "Số loại nguyên liệu" của dòng đã chọn
        int numberOfIngredients = (int) jTable1.getValueAt(selectedRow, 1); // Giả sử cột "Số loại nguyên liệu" có chỉ số 1

        // Lấy ID của hóa đơn được chọn
        long billId = (long) jTable1.getValueAt(selectedRow, 0);

        // Kiểm tra số dòng dữ liệu trong tb_detail_import_bill với billid bằng id của dòng dữ liệu được chọn
        try (Connection con = ConnectDB.openConnect(); PreparedStatement checkPs = con.prepareStatement("SELECT COUNT(*) AS count FROM tb_detail_import_bill WHERE billid = ?")) {
            checkPs.setLong(1, billId);
            ResultSet checkRs = checkPs.executeQuery();
            if (checkRs.next()) {
                int rowCount = checkRs.getInt("count");
                if (rowCount > 0) {
                    JOptionPane.showMessageDialog(this, "Đã nhập hàng cho hóa đơn này.");
                    return;
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi kiểm tra dữ liệu.");
            return;
        } catch (Exception ex) {
            Logger.getLogger(QuanLiNhapKho.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            // Thêm chi tiết nhập hàng cho mỗi loại nguyên liệu
            for (int i = 0; i < numberOfIngredients; i++) {
                long detailId = Long.parseLong(JOptionPane.showInputDialog(this, "Nhập ID của chi tiết nhập hàng:"));
                int quantity = Integer.parseInt(JOptionPane.showInputDialog(this, "Nhập số lượng:"));
                double price = Double.parseDouble(JOptionPane.showInputDialog(this, "Nhập giá tiền mỗi kg/lít:"));
                // Tính tổng tiền
                double total = quantity * price;
                long ingredientId = Long.parseLong(JOptionPane.showInputDialog(this, "Nhập ID của nguyên liệu:"));
                // Thêm dữ liệu vào bảng tb_detail_import_bill
                try (Connection con = ConnectDB.openConnect(); PreparedStatement ps = con.prepareStatement("INSERT INTO tb_detail_import_bill (id, quantity, price, total, ingredientid, billid) VALUES (?, ?, ?, ?, ?, ?)")) {
                    ps.setLong(1, detailId);
                    ps.setInt(2, quantity);
                    ps.setDouble(3, price);
                    ps.setDouble(4, total);
                    ps.setLong(5, ingredientId);
                    ps.setLong(6, billId);
                    ps.executeUpdate();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi thêm chi tiết nhập hàng");
                }
                // Kiểm tra và cập nhật hoặc thêm mới dữ liệu vào bảng tb_ingredients
                try (Connection con = ConnectDB.openConnect(); PreparedStatement checkPs = con.prepareStatement("SELECT id, quantity FROM tb_ingredients WHERE id = ?"); PreparedStatement updatePs = con.prepareStatement("UPDATE tb_ingredients SET quantity = quantity + ? WHERE id = ?"); PreparedStatement insertPs = con.prepareStatement("INSERT INTO tb_ingredients (id, quantity) VALUES (?, ?)")) {

                    // Kiểm tra xem ingredientId đã tồn tại trong bảng tb_ingredients hay chưa
                    checkPs.setLong(1, ingredientId);
                    ResultSet checkRs = checkPs.executeQuery();

                    if (checkRs.next()) {
                        // Nếu ingredientId đã tồn tại, cập nhật giá trị của cột quantity
                        updatePs.setInt(1, quantity);
                        updatePs.setLong(2, ingredientId);
                        updatePs.executeUpdate();
                    } else {
                        // Nếu ingredientId chưa tồn tại, thông báo cho người dùng và yêu cầu nhập lại
                        JOptionPane.showMessageDialog(this, "Không tồn tại loại nguyên liệu có ID " + ingredientId + ". Vui lòng nhập lại.");
                        return; // Kết thúc phương thức để yêu cầu nhập lại
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi cập nhật vào bảng tb_ingredients");
                }
            }
            JOptionPane.showMessageDialog(this, "Đã thêm chi tiết nhập hàng thành công");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập số cho các trường số liệu");
        } catch (Exception ex) {
            Logger.getLogger(QuanLiNhapKho.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hóa đơn để xem chi tiết.");
            return;
        }
        long selectedBillId = (long) jTable1.getValueAt(selectedRow, 0);
        StringBuilder detailInfo = new StringBuilder();
        try {
            Connection con = ConnectDB.openConnect();
            PreparedStatement ps = con.prepareStatement("SELECT * FROM tb_detail_import_bill WHERE billid = ?");
            ps.setLong(1, selectedBillId);
            ResultSet rs = ps.executeQuery();
            if (!rs.isBeforeFirst()) {
                JOptionPane.showMessageDialog(this, "Không có chi tiết nào cho hóa đơn này.");
                return;
            }
            // Lấy thông tin nhà cung cấp
            PreparedStatement supplierPs = con.prepareStatement("SELECT * FROM tb_supplier WHERE id = ?");
            supplierPs.setLong(1, (long) jTable1.getValueAt(selectedRow, 5));
            ResultSet supplierRs = supplierPs.executeQuery();
            if (supplierRs.next()) {
                detailInfo.append("Thông tin nhà cung cấp:\n");
                detailInfo.append("ID: ").append(supplierRs.getLong("id")).append("\n");
                detailInfo.append("Tên: ").append(supplierRs.getString("name")).append("\n");
                detailInfo.append("Địa chỉ: ").append(supplierRs.getString("address")).append("\n");
                detailInfo.append("Số điện thoại: ").append(supplierRs.getString("phone")).append("\n\n");
            }
            detailInfo.append("Chi tiết nhập hàng cho hóa đơn có ID: ").append(selectedBillId).append("\n\n");
            while (rs.next()) {
                long detailId = rs.getLong("id");
                int quantity = rs.getInt("quantity");
                double price = rs.getDouble("price");
                double total = rs.getDouble("total");
                long ingredientId = rs.getLong("ingredientid");

                detailInfo.append("ID chi tiết: ").append(detailId).append("\n");
                detailInfo.append("Số lượng: ").append(quantity).append("\n");
                detailInfo.append("Giá tiền mỗi kg/lít: ").append(price).append("\n");
                detailInfo.append("Tổng tiền: ").append(total).append("\n");
                detailInfo.append("ID nguyên liệu: ").append(ingredientId).append("\n");

                // Kiểm tra và lấy thông tin nguyên liệu từ bảng tb_ingredients nếu cần
                PreparedStatement ingredientPs = con.prepareStatement("SELECT * FROM tb_ingredients WHERE id = ?");
                ingredientPs.setLong(1, ingredientId);
                ResultSet ingredientRs = ingredientPs.executeQuery();
                if (ingredientRs.next()) {
                    String ingredientName = ingredientRs.getString("name");
                    detailInfo.append("Tên nguyên liệu: ").append(ingredientName).append("\n");
                }
                detailInfo.append("\n");

                ingredientRs.close();
                ingredientPs.close();
            }
            rs.close();
            ps.close();
            supplierRs.close();
            supplierPs.close();
            con.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi tải chi tiết nhập hàng.");
            return;
        }
        BillDetailDialog dialog = new BillDetailDialog((JFrame) javax.swing.SwingUtilities.getWindowAncestor(this), "Chi tiết hóa đơn", detailInfo.toString());
        dialog.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hóa đơn để sửa.");
            return;
        }
// Lấy thông tin từ cột của dòng được chọn
        long id = (long) jTable1.getValueAt(selectedRow, 0);
        int quantity = (int) jTable1.getValueAt(selectedRow, 1);
        double total = (double) jTable1.getValueAt(selectedRow, 2);
        long userid = (long) jTable1.getValueAt(selectedRow, 4);
        long supplierid = (long) jTable1.getValueAt(selectedRow, 5);
        try {
            // Hiển thị các hộp thoại yêu cầu nhập thông tin mới
            long newId = Long.parseLong(JOptionPane.showInputDialog(this, "Nhập ID của hóa đơn:", id));
            int newQuantity = Integer.parseInt(JOptionPane.showInputDialog(this, "Nhập số loại nguyên liệu:", quantity));
            double newTotal = Double.parseDouble(JOptionPane.showInputDialog(this, "Nhập tổng tiền:", total));
            long newUserId = Long.parseLong(JOptionPane.showInputDialog(this, "Nhập ID của người nhập:", userid));
            long newSupplierId = Long.parseLong(JOptionPane.showInputDialog(this, "Nhập ID của nhà cung cấp:", supplierid));
            // Update dữ liệu trong cơ sở dữ liệu với thông tin mới
            try (Connection con = ConnectDB.openConnect(); PreparedStatement ps = con.prepareStatement("UPDATE tb_import_bill SET id = ?, quantity = ?, total = ?, userid = ?, supplierID = ? WHERE id = ?")) {
                ps.setLong(1, newId);
                ps.setInt(2, newQuantity);
                ps.setDouble(3, newTotal);
                ps.setLong(4, newUserId);
                ps.setLong(5, newSupplierId);
                ps.setLong(6, id); // Sử dụng id cũ để xác định hóa đơn cần cập nhật
                ps.executeUpdate();
            }
            // Kiểm tra nếu số loại nguyên liệu mới lớn hơn số loại nguyên liệu cũ
            if (newQuantity > quantity) {
                // Yêu cầu nhập thêm chi tiết nhập hàng cho số loại nguyên liệu mới
                int remainingIngredients = newQuantity - quantity;
                for (int i = 0; i < remainingIngredients; i++) {
                    long detailId = Long.parseLong(JOptionPane.showInputDialog(this, "Nhập ID của chi tiết nhập hàng:"));
                    int quantity2 = Integer.parseInt(JOptionPane.showInputDialog(this, "Nhập số lượng:"));
                    double price = Double.parseDouble(JOptionPane.showInputDialog(this, "Nhập giá tiền mỗi kg/lít:"));
                    double total2 = quantity * price;
                    long ingredientId = Long.parseLong(JOptionPane.showInputDialog(this, "Nhập ID của nguyên liệu:"));

                    // Thêm dữ liệu vào bảng tb_detail_import_bill
                    try (Connection con = ConnectDB.openConnect(); PreparedStatement insertPs = con.prepareStatement("INSERT INTO tb_detail_import_bill (id, quantity, price, total, ingredientid, billid) VALUES (?, ?, ?, ?, ?, ?)")) {

                        insertPs.setLong(1, detailId);
                        insertPs.setInt(2, quantity2);
                        insertPs.setDouble(3, price);
                        insertPs.setDouble(4, total2);
                        insertPs.setLong(5, ingredientId);
                        insertPs.setLong(6, newId); // Sử dụng newId làm billid cho các chi tiết nhập hàng mới
                        insertPs.executeUpdate();
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi thêm chi tiết nhập hàng");
                    }
                }
                JOptionPane.showMessageDialog(this, "Đã thêm chi tiết nhập hàng cho hóa đơn thành công");
            }
            // Hiển thị thông báo thành công
            JOptionPane.showMessageDialog(this, "Đã cập nhật thông tin hóa đơn thành công.");
            loadImportBills(); // Tải lại danh sách hóa đơn sau khi cập nhật
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập số cho các trường số liệu.");
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi cập nhật thông tin hóa đơn.");
        } catch (Exception ex) {
            Logger.getLogger(QuanLiNhapKho.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hóa đơn để xuất file Excel.");
            return;
        }

        try {
            Workbook workbook = new XSSFWorkbook();
            Sheet sheet = workbook.createSheet("Chi tiết hóa đơn");

            // Tạo header cho thông tin chi tiết
            Row detailHeaderRow = sheet.createRow(0);
            String[] detailHeaders = {"ID chi tiết", "Số lượng", "Giá tiền mỗi kg/lít", "Tổng tiền", "ID nguyên liệu", "Tên nguyên liệu"};
            for (int i = 0; i < detailHeaders.length; i++) {
                Cell cell = detailHeaderRow.createCell(i);
                cell.setCellValue(detailHeaders[i]);
            }

            // Lấy thông tin chi tiết từ JTable
            long selectedBillId = (long) jTable1.getValueAt(selectedRow, 0);
            int rowIndex = 1;
            Connection con = ConnectDB.openConnect();
            PreparedStatement ps = con.prepareStatement("SELECT * FROM tb_detail_import_bill WHERE billid = ?");
            ps.setLong(1, selectedBillId);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Row row = sheet.createRow(rowIndex++);
                row.createCell(0).setCellValue(rs.getLong("id"));
                row.createCell(1).setCellValue(rs.getInt("quantity"));
                row.createCell(2).setCellValue(rs.getDouble("price"));
                row.createCell(3).setCellValue(rs.getDouble("total"));
                row.createCell(4).setCellValue(rs.getLong("ingredientid"));
                long ingredientId = rs.getLong("ingredientid");
                row.createCell(4).setCellValue(ingredientId); // Lưu ID nguyên liệu vào cột
                // Lấy tên nguyên liệu từ bảng tb_ingredients
                PreparedStatement ingredientPs = con.prepareStatement("SELECT name FROM tb_ingredients WHERE id = ?");
                ingredientPs.setLong(1, ingredientId);
                ResultSet ingredientRs = ingredientPs.executeQuery();
                if (ingredientRs.next()) {
                    String ingredientName = ingredientRs.getString("name");
                    row.createCell(5).setCellValue(ingredientName); // Lưu tên nguyên liệu vào cột
                }

                ingredientRs.close();
                ingredientPs.close();
            }

            // Lấy thông tin nhà cung cấp từ cơ sở dữ liệu
            PreparedStatement supplierPs = con.prepareStatement("SELECT * FROM tb_supplier WHERE id = ?");
            supplierPs.setLong(1, (long) jTable1.getValueAt(selectedRow, 5));
            ResultSet supplierRs = supplierPs.executeQuery();
            Row supplierHeaderRow = sheet.createRow(rowIndex++);
            supplierHeaderRow.createCell(0).setCellValue("Thông tin nhà cung cấp");
            rowIndex++;
            if (supplierRs.next()) {
                Row row = sheet.createRow(rowIndex++);
                row.createCell(0).setCellValue("ID");
                row.createCell(1).setCellValue(supplierRs.getLong("id"));
                row = sheet.createRow(rowIndex++);
                row.createCell(0).setCellValue("Tên");
                row.createCell(1).setCellValue(supplierRs.getString("name"));
                row = sheet.createRow(rowIndex++);
                row.createCell(0).setCellValue("Địa chỉ");
                row.createCell(1).setCellValue(supplierRs.getString("address"));
                row = sheet.createRow(rowIndex++);
                row.createCell(0).setCellValue("Số điện thoại");
                row.createCell(1).setCellValue(supplierRs.getString("phone"));
            }

            // Lưu file Excel
            String filePath = "ChiTietHoaDon_" + selectedBillId + ".xlsx";
            FileOutputStream fileOut = new FileOutputStream(filePath);
            workbook.write(fileOut);
            fileOut.close();

            JOptionPane.showMessageDialog(this, "Xuất file Excel thành công.");

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi xuất file Excel.");
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jButton1;
    public javax.swing.JButton jButton2;
    public javax.swing.JButton jButton3;
    public javax.swing.JButton jButton4;
    public javax.swing.JButton jButton5;
    public javax.swing.JButton jButton6;
    public javax.swing.JButton jButton7;
    public javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel2;
    public javax.swing.JPanel jPanel3;
    public javax.swing.JPanel jPanel4;
    public javax.swing.JPanel jPanel6;
    public javax.swing.JPanel jPanel7;
    public javax.swing.JPanel jPanel8;
    public javax.swing.JPanel jPanel9;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    public GUI.Comp.Swing.PanelBackground panelBackground1;
    public GUI.Comp.Swing.PanelBackground panelBackground2;
    public GUI.Comp.Swing.PanelBackground panelBackground3;
    public GUI.Comp.Swing.PanelBackground panelBackground4;
    public GUI.Comp.Swing.PanelBackground panelBackground5;
    public GUI.Comp.Swing.PanelBackground panelBackground6;
    public GUI.Comp.Swing.PanelBackground panelBackground7;
    public GUI.Comp.Swing.PanelBackground panelBackground8;
    // End of variables declaration//GEN-END:variables
}
