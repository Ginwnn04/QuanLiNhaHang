/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.Comp;

import BUS.RecipesBUS;
import DTO.RecipesDTO;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Tai
 */
public class QuanLiMonAn extends javax.swing.JPanel {

    /**
     * Creates new form QuanLiMonAn
     */
    public QuanLiMonAn() {
        initComponents();
        loadDataToTable();

    }

    // Method to load data from tb_recipes to JTable
    private void loadDataToTable() {
    RecipesBUS recipesBUS = new RecipesBUS(); // Tạo một thể hiện của lớp RecipesBUS
    ArrayList<RecipesDTO> listRecipes = recipesBUS.getAllActiveRecipes(); // Sử dụng phương thức mới chỉ lấy các bản ghi không bị xóa
    DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
    model.setRowCount(0); // Clear existing rows
    Object[] row = new Object[3]; // Change the size to 3
    for (RecipesDTO recipe : listRecipes) {
        row[0] = false; // Assuming all checkboxes are unchecked initially
        row[1] = recipe.getId();
        row[2] = recipe.getName();
        model.addRow(row);
    }
    DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
    renderer.setHorizontalAlignment(JLabel.CENTER);
    for (int i = 0; i < jTable2.getColumnCount(); i++) {
        jTable2.getColumnModel().getColumn(i).setCellRenderer(renderer);
    }
    // Set custom cell renderer for the first column to display checkboxes
    TableColumnModel columnModel = jTable2.getColumnModel();
    columnModel.getColumn(0).setCellRenderer(new DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            JCheckBox checkBox = new JCheckBox();
            checkBox.setSelected((boolean) value);
            checkBox.setHorizontalAlignment(JLabel.CENTER);
            // Set background color of the checkbox
            checkBox.setBackground(new Color(35, 35, 35)); // Set the desired background color
            return checkBox;
        }
    });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBackground1 = new GUI.Comp.Swing.PanelBackground();
        panelBackground2 = new GUI.Comp.Swing.PanelBackground();
        panelBackground3 = new GUI.Comp.Swing.PanelBackground();
        panelBackground4 = new GUI.Comp.Swing.PanelBackground();
        panelBackground5 = new GUI.Comp.Swing.PanelBackground();
        panelBackground6 = new GUI.Comp.Swing.PanelBackground();
        panelBackground8 = new GUI.Comp.Swing.PanelBackground();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        panelBackground7 = new GUI.Comp.Swing.PanelBackground();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();

        setBackground(new java.awt.Color(30, 30, 30));
        setLayout(new java.awt.BorderLayout());

        panelBackground1.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground1.setLayout(new java.awt.BorderLayout());

        panelBackground2.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground2.setPreferredSize(new java.awt.Dimension(100, 20));
        panelBackground1.add(panelBackground2, java.awt.BorderLayout.PAGE_START);

        panelBackground3.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground3.setPreferredSize(new java.awt.Dimension(20, 100));
        panelBackground1.add(panelBackground3, java.awt.BorderLayout.LINE_START);

        panelBackground4.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground4.setPreferredSize(new java.awt.Dimension(20, 100));
        panelBackground1.add(panelBackground4, java.awt.BorderLayout.LINE_END);

        panelBackground5.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground5.setPreferredSize(new java.awt.Dimension(100, 20));
        panelBackground1.add(panelBackground5, java.awt.BorderLayout.PAGE_END);

        panelBackground6.setBackground(new java.awt.Color(30, 30, 30));
        panelBackground6.setForeground(new java.awt.Color(255, 204, 102));
        panelBackground6.setLayout(new java.awt.BorderLayout(0, 25));

        panelBackground8.setBackground(new java.awt.Color(35, 35, 35));
        panelBackground8.setLayout(new java.awt.BorderLayout());

        jTable2.setBackground(new java.awt.Color(35, 35, 35));
        jTable2.setForeground(new java.awt.Color(255, 255, 255));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "", "ID", "Tên"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable2.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jTable2ComponentResized(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setMinWidth(25);
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(25);
            jTable2.getColumnModel().getColumn(0).setMaxWidth(25);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(50);
        }

        panelBackground8.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        panelBackground7.setBackground(new java.awt.Color(35, 35, 35));
        panelBackground7.setPreferredSize(new java.awt.Dimension(100, 50));
        panelBackground7.setLayout(new javax.swing.BoxLayout(panelBackground7, javax.swing.BoxLayout.Y_AXIS));

        jPanel1.setBackground(new java.awt.Color(35, 35, 35));
        jPanel1.setMaximumSize(new java.awt.Dimension(50, 23));
        jPanel1.setPreferredSize(new java.awt.Dimension(50, 23));
        panelBackground7.add(jPanel1);

        jButton1.setBackground(new java.awt.Color(102, 102, 102));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Thêm");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(53, 53, 53)));
        jButton1.setMaximumSize(new java.awt.Dimension(72, 40));
        jButton1.setPreferredSize(new java.awt.Dimension(72, 72));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        panelBackground7.add(jButton1);

        jPanel3.setBackground(new java.awt.Color(35, 35, 35));
        jPanel3.setMaximumSize(new java.awt.Dimension(50, 23));
        jPanel3.setPreferredSize(new java.awt.Dimension(50, 23));
        panelBackground7.add(jPanel3);

        jButton2.setBackground(new java.awt.Color(102, 102, 102));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Sửa");
        jButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(53, 53, 53)));
        jButton2.setMaximumSize(new java.awt.Dimension(72, 40));
        jButton2.setPreferredSize(new java.awt.Dimension(72, 72));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        panelBackground7.add(jButton2);

        jPanel2.setBackground(new java.awt.Color(35, 35, 35));
        jPanel2.setMaximumSize(new java.awt.Dimension(50, 23));
        jPanel2.setPreferredSize(new java.awt.Dimension(50, 23));
        panelBackground7.add(jPanel2);

        jButton3.setBackground(new java.awt.Color(102, 102, 102));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Xóa");
        jButton3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(53, 53, 53)));
        jButton3.setMaximumSize(new java.awt.Dimension(72, 40));
        jButton3.setPreferredSize(new java.awt.Dimension(72, 72));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        panelBackground7.add(jButton3);

        panelBackground8.add(panelBackground7, java.awt.BorderLayout.LINE_END);

        panelBackground6.add(panelBackground8, java.awt.BorderLayout.CENTER);

        panelBackground1.add(panelBackground6, java.awt.BorderLayout.CENTER);

        add(panelBackground1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jTable2ComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTable2ComponentResized
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2ComponentResized

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    // Lấy thời gian hiện tại
    long currentTime = System.currentTimeMillis();
    
    // Lấy ba chữ số cuối cùng của thời gian hiện tại
    int id = (int) (currentTime % 1000);
    

    String name = JOptionPane.showInputDialog(this, "Nhập tên món ăn:");
    if (name == null || name.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Tên món ăn không được để trống.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        return; // Tên món ăn không được để trống
    }

    // Thử thêm món ăn và xử lý ngoại lệ nếu có
    RecipesBUS recipesBUS = new RecipesBUS();
    try {
        recipesBUS.insertData(id, name);
        // Nếu không có lỗi, cập nhật dữ liệu trên JTable
        loadDataToTable();
        JOptionPane.showMessageDialog(this, "Thêm món ăn thành công.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Thêm món ăn thất bại. Vui lòng thử lại.", "Lỗi", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    // Kiểm tra xem người dùng đã chọn ít nhất một dòng để xóa hay không
    boolean atLeastOneSelected = false;
    int rowCount = jTable2.getRowCount();
    for (int i = 0; i < rowCount; i++) {
        Boolean checked = (Boolean) jTable2.getValueAt(i, 0); // Lấy giá trị của checkbox từ cột đầu tiên
        if (checked) {
            atLeastOneSelected = true;
            break;
        }
    }

    // Nếu không có dòng nào được chọn, hiển thị thông báo và không thực hiện xóa
    if (!atLeastOneSelected) {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn ít nhất một dòng để xóa.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        return;
    }

    // Hiển thị hộp thoại xác nhận trước khi xóa
    int option = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa các dòng đã chọn không?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
    if (option == JOptionPane.YES_OPTION) {
        // Duyệt qua từng hàng để kiểm tra checkbox đã được chọn chưa
        for (int i = rowCount - 1; i >= 0; i--) {
            Boolean checked = (Boolean) jTable2.getValueAt(i, 0); // Lấy giá trị của checkbox từ cột đầu tiên
            if (checked) {
                int id = (int) jTable2.getValueAt(i, 1); // Lấy giá trị ID từ cột thứ hai

                // Gọi phương thức deleteData() từ RecipesBUS để xóa dòng dữ liệu khỏi tb_recipes
                RecipesBUS recipesBUS = new RecipesBUS();
                recipesBUS.deleteData(id);
            }
        }
        // Cập nhật lại dữ liệu trên JTable
        loadDataToTable();
        JOptionPane.showMessageDialog(this, "Đã xóa các dòng đã chọn thành công.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    // Lấy số lượng hàng trong JTable
    int rowCount = jTable2.getRowCount();
    boolean updated = false; // Biến kiểm tra xem có dòng nào được cập nhật không
    // Duyệt qua từng hàng để kiểm tra checkbox đã được chọn chưa
    for (int i = 0; i < rowCount; i++) {
        Boolean checked = (Boolean) jTable2.getValueAt(i, 0); // Lấy giá trị của checkbox từ cột đầu tiên
        if (checked) {
            int id = (int) jTable2.getValueAt(i, 1); // Lấy giá trị ID từ cột thứ hai
            String currentName = (String) jTable2.getValueAt(i, 2); // Lấy giá trị Name từ cột thứ ba

            // Hiển thị hộp thoại cho phép người dùng nhập thông tin mới
            String newName = JOptionPane.showInputDialog(this, "Nhập tên mới cho món ăn:", currentName);
            if (newName != null && !newName.trim().isEmpty()) {
                // Gọi phương thức updateData() từ RecipesBUS để cập nhật thông tin mới
                RecipesBUS recipesBUS = new RecipesBUS();
                recipesBUS.updateData(id, newName);
                updated = true;
            }
        }
    }
    // Cập nhật lại dữ liệu trên JTable
    loadDataToTable();
    if (updated) {
        JOptionPane.showMessageDialog(this, "Đã cập nhật các dòng đã chọn thành công.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn ít nhất một dòng để sửa.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
    }     
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jButton1;
    public javax.swing.JButton jButton2;
    public javax.swing.JButton jButton3;
    public javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel2;
    public javax.swing.JPanel jPanel3;
    public javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTable jTable2;
    public GUI.Comp.Swing.PanelBackground panelBackground1;
    public GUI.Comp.Swing.PanelBackground panelBackground2;
    public GUI.Comp.Swing.PanelBackground panelBackground3;
    public GUI.Comp.Swing.PanelBackground panelBackground4;
    public GUI.Comp.Swing.PanelBackground panelBackground5;
    public GUI.Comp.Swing.PanelBackground panelBackground6;
    public GUI.Comp.Swing.PanelBackground panelBackground7;
    public GUI.Comp.Swing.PanelBackground panelBackground8;
    // End of variables declaration//GEN-END:variables
}
