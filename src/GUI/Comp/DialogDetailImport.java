/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI.Comp;

import static BUS.ConnectDB.openConnect;
import BUS.DetailImportBillBUS;
import BUS.IngredientsBUS;
import DTO.DetailImportBillDTO;
import java.awt.Dialog;
import java.awt.Window;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
/**
 *
 * @author Tai
 */
public class DialogDetailImport extends javax.swing.JPanel {
    private int currentBillId; // Biến để lưu trữ mã bill hiện tại
    // Thêm biến instance để lưu trữ chỉ mục của dòng được chọn trong JTable
    private int selectedRowIndex = -1;
    public DialogDetailImport() throws Exception {
        initComponents();
        currentBillId = (int) System.currentTimeMillis();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jTextField2 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jTextField4 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout(30, 0));

        jTable1.setBackground(new java.awt.Color(35, 35, 35));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Số lượng", "Giá mỗi kg/lít", "Tổng tiền", "Mã Bill", "Mã nguyên liệu"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setMaximumSize(new java.awt.Dimension(100, 100));
        jPanel1.setPreferredSize(new java.awt.Dimension(100, 100));
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jPanel18.setMaximumSize(new java.awt.Dimension(20, 16));
        jPanel18.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jPanel18);

        jLabel1.setText("số lượng");
        jPanel1.add(jLabel1);

        jPanel19.setMaximumSize(new java.awt.Dimension(20, 16));
        jPanel19.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jPanel19);

        jTextField1.setMaximumSize(new java.awt.Dimension(72, 20));
        jTextField1.setPreferredSize(new java.awt.Dimension(72, 16));
        jPanel1.add(jTextField1);

        jPanel3.setMaximumSize(new java.awt.Dimension(20, 16));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jPanel3);

        jLabel3.setText("giá mỗi kg/lít");
        jPanel1.add(jLabel3);

        jPanel20.setMaximumSize(new java.awt.Dimension(20, 16));
        jPanel20.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jPanel20);

        jTextField2.setMaximumSize(new java.awt.Dimension(72, 20));
        jTextField2.setPreferredSize(new java.awt.Dimension(72, 16));
        jPanel1.add(jTextField2);

        jPanel4.setMaximumSize(new java.awt.Dimension(20, 16));
        jPanel4.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jPanel4);

        jLabel5.setText("ID của nguyên liệu");
        jPanel1.add(jLabel5);

        jPanel21.setMaximumSize(new java.awt.Dimension(20, 16));
        jPanel21.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jPanel21);

        jTextField4.setMaximumSize(new java.awt.Dimension(72, 20));
        jTextField4.setPreferredSize(new java.awt.Dimension(72, 16));
        jPanel1.add(jTextField4);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setMaximumSize(new java.awt.Dimension(100, 100));
        jPanel2.setPreferredSize(new java.awt.Dimension(100, 100));
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

        jButton1.setText("Thêm");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        jPanel12.setMaximumSize(new java.awt.Dimension(20, 16));
        jPanel12.setLayout(new java.awt.BorderLayout());
        jPanel2.add(jPanel12);

        jButton3.setText("Xóa");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton3);

        jPanel5.setMaximumSize(new java.awt.Dimension(20, 16));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel8.setMaximumSize(new java.awt.Dimension(20, 16));
        jPanel8.setLayout(new java.awt.BorderLayout());
        jPanel5.add(jPanel8, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel5);

        jPanel7.setMaximumSize(new java.awt.Dimension(20, 16));
        jPanel7.setLayout(new java.awt.BorderLayout());
        jPanel2.add(jPanel7);

        jPanel9.setMaximumSize(new java.awt.Dimension(20, 16));
        jPanel9.setLayout(new java.awt.BorderLayout());
        jPanel2.add(jPanel9);

        jPanel10.setMaximumSize(new java.awt.Dimension(20, 16));
        jPanel10.setLayout(new java.awt.BorderLayout());
        jPanel2.add(jPanel10);

        jPanel11.setMaximumSize(new java.awt.Dimension(20, 16));
        jPanel11.setLayout(new java.awt.BorderLayout());
        jPanel2.add(jPanel11);

        jPanel14.setMaximumSize(new java.awt.Dimension(20, 16));
        jPanel14.setLayout(new java.awt.BorderLayout());
        jPanel2.add(jPanel14);

        jPanel15.setMaximumSize(new java.awt.Dimension(20, 16));
        jPanel15.setLayout(new java.awt.BorderLayout());

        jPanel16.setMaximumSize(new java.awt.Dimension(20, 16));
        jPanel16.setLayout(new java.awt.BorderLayout());
        jPanel15.add(jPanel16, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel15);

        jPanel17.setMaximumSize(new java.awt.Dimension(20, 16));
        jPanel17.setLayout(new java.awt.BorderLayout());
        jPanel2.add(jPanel17);

        jButton4.setText("Xác nhận");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton4);

        add(jPanel2, java.awt.BorderLayout.LINE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    // Kiểm tra xem các trường text field có trống không
    if (jTextField1.getText().isEmpty() || jTextField2.getText().isEmpty() || jTextField4.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
        return; // Thoát khỏi phương thức nếu có trường trống
    }

    try {
        // Lấy giá trị từ các text field
        int quantity = Integer.parseInt(jTextField1.getText());
        double price = Double.parseDouble(jTextField2.getText());
        int ingredientId = Integer.parseInt(jTextField4.getText()); // Lấy ingredientId từ text field

        // Tính tổng tiền
        double total = quantity * price;

        // Tạo ID mới sử dụng System.currentTimeMillis()
        long id = System.currentTimeMillis();

        // Tạo một đối tượng DetailImportBillDTO mới
        DetailImportBillDTO detail = new DetailImportBillDTO();
        detail.setId((int) id);
        detail.setQuantity(quantity);
        detail.setPrice(price);
        detail.setTotal(total);
        detail.setBillid(currentBillId); // Sử dụng mã Bill hiện tại
        detail.setIngredientid(ingredientId);

        // Thêm dòng dữ liệu vào JTable1
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.addRow(new Object[]{detail.getId(), detail.getQuantity(), detail.getPrice(), detail.getTotal(), detail.getBillid(), detail.getIngredientid()});

        // Thông báo thêm thành công
        JOptionPane.showMessageDialog(this, "Thêm thành công.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);

        // Reset các text field sau khi thêm thành công
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField4.setText("");
    } catch (NumberFormatException ex) {
        // Xử lý nếu người dùng nhập không đúng định dạng số
        JOptionPane.showMessageDialog(this, "Vui lòng nhập số vào các trường số lượng, giá và mã nguyên liệu.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
    } catch (Exception ex) {
        // Xử lý nếu có lỗi khi thêm dữ liệu
        JOptionPane.showMessageDialog(this, "Lỗi khi thêm dữ liệu: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    // Kiểm tra xem có dòng nào được chọn không
    if (jTable1.getSelectedRow() == -1) {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn dòng cần xóa.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
        return;
    }
    
    // Lấy chỉ mục của dòng được chọn
    int selectedRow = jTable1.getSelectedRow();
    
    // Xóa dòng được chọn khỏi JTable
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.removeRow(selectedRow);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    int confirmation = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn thêm dữ liệu?", "Xác nhận", JOptionPane.YES_NO_OPTION);
    if (confirmation == JOptionPane.YES_OPTION) {
        try {
            // Tiếp tục với quá trình thêm dữ liệu

            // Yêu cầu người dùng nhập userid
            long userIdInput = Long.parseLong(JOptionPane.showInputDialog(this, "Nhập UserID:"));

            // Yêu cầu người dùng nhập supplierid
            long supplierIdInput = Long.parseLong(JOptionPane.showInputDialog(this, "Nhập SupplierID:"));

            // Lấy số lượng dòng dữ liệu trong jTable
            int totalQuantity = jTable1.getRowCount();

            // Tính tổng tiền
            double totalAmount = 0;
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                totalAmount += (double) model.getValueAt(i, 3);
            }

            // Lấy ngày hiện tại
            java.util.Date date = new java.util.Date();
            java.sql.Date importDate = new java.sql.Date(date.getTime());

            // Thêm dòng dữ liệu vào tb_import_bill
            Connection conn = openConnect();
            String sqlInsertImportBill = "INSERT INTO tb_import_bill (id, quantity, total, import_date, userid, supplierid, isdeleted) VALUES (?, ?, ?, ?, ?, ?, ?)";
            PreparedStatement pstmt = conn.prepareStatement(sqlInsertImportBill);
            pstmt.setInt(1, currentBillId);
            pstmt.setInt(2, totalQuantity);
            pstmt.setDouble(3, totalAmount);
            pstmt.setDate(4, importDate);
            pstmt.setLong(5, userIdInput);
            pstmt.setLong(6, supplierIdInput);
            pstmt.setBoolean(7, false);
            pstmt.executeUpdate();

            // Thêm các dòng dữ liệu trong JTable vào tb_detail_import_bill
            String sqlInsertDetailImportBill = "INSERT INTO tb_detail_import_bill (id, quantity, price, total, billid, ingredientid, isdeleted) VALUES (?, ?, ?, ?, ?, ?, ?)";
            pstmt = conn.prepareStatement(sqlInsertDetailImportBill);
            for (int i = 0; i < model.getRowCount(); i++) {
                pstmt.setInt(1, (int) model.getValueAt(i, 0));
                pstmt.setInt(2, (int) model.getValueAt(i, 1));
                pstmt.setDouble(3, (double) model.getValueAt(i, 2));
                pstmt.setDouble(4, (double) model.getValueAt(i, 3));
                pstmt.setInt(5, currentBillId);
                pstmt.setInt(6, (int) model.getValueAt(i, 5));
                pstmt.setBoolean(7, false);
                pstmt.addBatch();
            }
            pstmt.executeBatch();

            // Kiểm tra và cập nhật quantity trong tb_ingredients
            String sqlUpdateIngredients = "UPDATE tb_ingredients SET quantity = quantity + ? WHERE id = ?";
            pstmt = conn.prepareStatement(sqlUpdateIngredients);
            for (int i = 0; i < model.getRowCount(); i++) {
                // Lấy ingredientid từ JTable
                int ingredientId = (int) model.getValueAt(i, 5);
                // Kiểm tra ingredientid trong tb_ingredients
                String sqlCheckIngredient = "SELECT id FROM tb_ingredients WHERE id = ?";
                PreparedStatement checkStmt = conn.prepareStatement(sqlCheckIngredient);
                checkStmt.setInt(1, ingredientId);
                ResultSet rs = checkStmt.executeQuery();
                if (rs.next()) { // Nếu ingredientid tồn tại trong tb_ingredients
                    // Cộng dồn quantity từ tb_detail_import_bill vào tb_ingredients
                    pstmt.setInt(1, (int) model.getValueAt(i, 1)); // quantity từ tb_detail_import_bill
                    pstmt.setInt(2, ingredientId);
                    pstmt.addBatch();
                }
                rs.close();
                checkStmt.close();
            }
            pstmt.executeBatch();

            // Đóng kết nối
            pstmt.close();
            conn.close();
            JOptionPane.showMessageDialog(this, "Thêm dữ liệu thành công.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            dispose();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "UserID và SupplierID phải là số nguyên.", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi thêm dữ liệu vào cơ sở dữ liệu: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_jButton4ActionPerformed

    // Thêm phương thức dispose vào JDialog
private void dispose() {
    Window window = SwingUtilities.getWindowAncestor(this);
    if (window instanceof Dialog) {
        Dialog dialog = (Dialog) window;
        dialog.dispose();
    }
}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton jButton1;
    public javax.swing.JButton jButton3;
    public javax.swing.JButton jButton4;
    public javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel5;
    public javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel10;
    public javax.swing.JPanel jPanel11;
    public javax.swing.JPanel jPanel12;
    public javax.swing.JPanel jPanel14;
    public javax.swing.JPanel jPanel15;
    public javax.swing.JPanel jPanel16;
    public javax.swing.JPanel jPanel17;
    public javax.swing.JPanel jPanel18;
    public javax.swing.JPanel jPanel19;
    public javax.swing.JPanel jPanel2;
    public javax.swing.JPanel jPanel20;
    public javax.swing.JPanel jPanel21;
    public javax.swing.JPanel jPanel3;
    public javax.swing.JPanel jPanel4;
    public javax.swing.JPanel jPanel5;
    public javax.swing.JPanel jPanel7;
    public javax.swing.JPanel jPanel8;
    public javax.swing.JPanel jPanel9;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    public javax.swing.JTextField jTextField1;
    public javax.swing.JTextField jTextField2;
    public javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables

    private boolean isBillIdExists(int billId) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private int generateNewBillId() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
